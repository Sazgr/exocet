#ifndef EXOCET_LOOKUP
#define EXOCET_LOOKUP

#include "types.h"
#include <array>
#include <string>

//rays

constexpr std::array<std::array<u64, 64>, 9> generate_rays() {
    std::array<std::array<u64, 64>, 9> constexpr_rays{};
    constexpr std::array<int, 8> offsets = {9, 8, 7, 1, 1, 7, 8, 9};
    constexpr std::array<u64, 8> masks = {0x7f7f7f7f7f7f7f, 0xffffffffffffff, 0xfefefefefefefe, 0x7f7f7f7f7f7f7f7f, 0xfefefefefefefefe, 0x7f7f7f7f7f7f7f00, 0xffffffffffffff00, 0xfefefefefefefe00};
    for (int i{}; i < 8; ++i) {
        for (int j{}; j < 64; ++j) {
            u64 result = 0ull;
            for (int k{}; k < 8; ++k) {
                result |= (1ull << j);
                if (i < 4) result >>= offsets[i];
                else result <<= offsets[i];
                result &= masks[i];
            }
            constexpr_rays[i][j] = result;
        }
    }
    return constexpr_rays;
}
constexpr std::array<std::array<u64, 64>, 9> rays = generate_rays();

constexpr std::array<std::array<u64, 64>, 64> generate_between() {
    std::array<std::array<u64, 64>, 64> constexpr_between{};
    for (int i{}; i < 64; ++i) {
        for (int j{}; j < 64; ++j) {
            for (int k{}; k < 8; ++k) {
                constexpr_between[i][j] |= (rays[k][i] & rays[7 - k][j]);
            }
        }
    }
    return constexpr_between;
}
constexpr std::array<std::array<u64, 64>, 64> between = generate_between();

//piece attacks

const u64 pawn_pushes[2][64] {{ 
    0x100,0x200,0x400,0x800,0x1000,0x2000,0x4000,0x8000,
    0x1010000,0x2020000,0x4040000,0x8080000,0x10100000,0x20200000,0x40400000,0x80800000,
    0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x80000000,
    0x100000000,0x200000000,0x400000000,0x800000000,0x1000000000,0x2000000000,0x4000000000,0x8000000000,
    0x10000000000,0x20000000000,0x40000000000,0x80000000000,0x100000000000,0x200000000000,0x400000000000,0x800000000000,
    0x1000000000000,0x2000000000000,0x4000000000000,0x8000000000000,0x10000000000000,0x20000000000000,0x40000000000000,0x80000000000000,
    0x100000000000000,0x200000000000000,0x400000000000000,0x800000000000000,0x1000000000000000,0x2000000000000000,0x4000000000000000,0x8000000000000000,
    0,0,0,0,0,0,0,0,
}, {
    0,0,0,0,0,0,0,0,
    0x1,0x2,0x4,0x8,0x10,0x20,0x40,0x80,
    0x100,0x200,0x400,0x800,0x1000,0x2000,0x4000,0x8000,
    0x10000,0x20000,0x40000,0x80000,0x100000,0x200000,0x400000,0x800000,
    0x1000000,0x2000000,0x4000000,0x8000000,0x10000000,0x20000000,0x40000000,0x80000000,
    0x100000000,0x200000000,0x400000000,0x800000000,0x1000000000,0x2000000000,0x4000000000,0x8000000000,
    0x10100000000,0x20200000000,0x40400000000,0x80800000000,0x101000000000,0x202000000000,0x404000000000,0x808000000000,
    0x1000000000000,0x2000000000000,0x4000000000000,0x8000000000000,0x10000000000000,0x20000000000000,0x40000000000000,0x80000000000000,
}};

const u64 pawn_attacks[2][65] {{
    0x200,0x500,0xa00,0x1400,0x2800,0x5000,0xa000,0x4000,
    0x20000,0x50000,0xa0000,0x140000,0x280000,0x500000,0xa00000,0x400000,
    0x2000000,0x5000000,0xa000000,0x14000000,0x28000000,0x50000000,0xa0000000,0x40000000,
    0x200000000,0x500000000,0xa00000000,0x1400000000,0x2800000000,0x5000000000,0xa000000000,0x4000000000,
    0x20000000000,0x50000000000,0xa0000000000,0x140000000000,0x280000000000,0x500000000000,0xa00000000000,0x400000000000,
    0x2000000000000,0x5000000000000,0xa000000000000,0x14000000000000,0x28000000000000,0x50000000000000,0xa0000000000000,0x40000000000000,
    0x200000000000000,0x500000000000000,0xa00000000000000,0x1400000000000000,0x2800000000000000,0x5000000000000000,0xa000000000000000,0x4000000000000000,
    0,0,0,0,0,0,0,0,
    0 //index 64 is used for ep
}, {
    0,0,0,0,0,0,0,0,
    0x2,0x5,0xa,0x14,0x28,0x50,0xa0,0x40,
    0x200,0x500,0xa00,0x1400,0x2800,0x5000,0xa000,0x4000,
    0x20000,0x50000,0xa0000,0x140000,0x280000,0x500000,0xa00000,0x400000,
    0x2000000,0x5000000,0xa000000,0x14000000,0x28000000,0x50000000,0xa0000000,0x40000000,
    0x200000000,0x500000000,0xa00000000,0x1400000000,0x2800000000,0x5000000000,0xa000000000,0x4000000000,
    0x20000000000,0x50000000000,0xa0000000000,0x140000000000,0x280000000000,0x500000000000,0xa00000000000,0x400000000000,
    0x2000000000000,0x5000000000000,0xa000000000000,0x14000000000000,0x28000000000000,0x50000000000000,0xa0000000000000,0x40000000000000,
    0 //index 64 is used for ep
}};

const u64 knight_attacks[64] {
    0x20400,0x50800,0xa1100,0x142200,0x284400,0x508800,0xa01000,0x402000,
    0x2040004,0x5080008,0xa110011,0x14220022,0x28440044,0x50880088,0xa0100010,0x40200020,
    0x204000402,0x508000805,0xa1100110a,0x1422002214,0x2844004428,0x5088008850,0xa0100010a0,0x4020002040,
    0x20400040200,0x50800080500,0xa1100110a00,0x142200221400,0x284400442800,0x508800885000,0xa0100010a000,0x402000204000,
    0x2040004020000,0x5080008050000,0xa1100110a0000,0x14220022140000,0x28440044280000,0x50880088500000,0xa0100010a00000,0x40200020400000,
    0x204000402000000,0x508000805000000,0xa1100110a000000,0x1422002214000000,0x2844004428000000,0x5088008850000000,0xa0100010a0000000,0x4020002040000000,
    0x400040200000000,0x800080500000000,0x1100110a00000000,0x2200221400000000,0x4400442800000000,0x8800885000000000,0x100010a000000000,0x2000204000000000,
    0x4020000000000,0x8050000000000,0x110a0000000000,0x22140000000000,0x44280000000000,0x88500000000000,0x10a00000000000,0x20400000000000,
};

const u64 king_attacks[64] {
    0x302,0x705,0xe0a,0x1c14,0x3828,0x7050,0xe0a0,0xc040,
    0x30203,0x70507,0xe0a0e,0x1c141c,0x382838,0x705070,0xe0a0e0,0xc040c0,
    0x3020300,0x7050700,0xe0a0e00,0x1c141c00,0x38283800,0x70507000,0xe0a0e000,0xc040c000,
    0x302030000,0x705070000,0xe0a0e0000,0x1c141c0000,0x3828380000,0x7050700000,0xe0a0e00000,0xc040c00000,
    0x30203000000,0x70507000000,0xe0a0e000000,0x1c141c000000,0x382838000000,0x705070000000,0xe0a0e0000000,0xc040c0000000,
    0x3020300000000,0x7050700000000,0xe0a0e00000000,0x1c141c00000000,0x38283800000000,0x70507000000000,0xe0a0e000000000,0xc040c000000000,
    0x302030000000000,0x705070000000000,0xe0a0e0000000000,0x1c141c0000000000,0x3828380000000000,0x7050700000000000,0xe0a0e00000000000,0xc040c00000000000,
    0x203000000000000,0x507000000000000,0xa0e000000000000,0x141c000000000000,0x2838000000000000,0x5070000000000000,0xa0e0000000000000,0x40c0000000000000,
};

#endif
